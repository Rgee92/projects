---
AWSTemplateFormatVersion: 2010-09-09

Description: AWS Cloudformation Stack of ECS Fargate with CodeDeploy

Parameters: {}

Mappings: {}

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  ECSServiceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ECSInternetFacingLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Internet Facing Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0  
      VpcId: !Ref VPC

  ECSInternetFacingLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      Type: application
      SecurityGroups:
        - !Ref ECSInternetFacingLoadBalancerSecurityGroup

  ECSInternetFacingLoadBalancerDefaultListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref nginxTargetGroup
      LoadBalancerArn: !Ref ECSInternetFacingLoadBalancer
      Port: 80
      Protocol: HTTP

  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: nginx ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80          
          SourceSecurityGroupId: !Ref ECSInternetFacingLoadBalancerSecurityGroup
      VpcId: !Ref VPC

  nginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: HTTP
      Matcher: 
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  nginxECSCluster:
    Type: AWS::ECS::Cluster

  nginxTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: nginx-group-2
      RetentionInDays: 1

  nginxTaskIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  nginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: nginx:1.17.0
          # unsure if LogConfiguration: awslogs is required for fargate
          # however, awslogs is the only available logdriver option
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref nginxTaskLogGroup
              awslogs-region: !Ref AWS::Region
              # if awslogs-stream-prefix is not set the following error is thrown:
              # Fargate requires log configuration options to include awslogs-stream-prefix to support log driver awslogs
              awslogs-stream-prefix: nginx
          Name: nginx
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
      # the Cpu property is required if using the Fargate launch type
      Cpu: 256
      # an ExecutionRoleArn is required if a ContainerDefinition contains a LogConfiguration
      # that utilizes LogDriver: awslogs
      ExecutionRoleArn: !Ref nginxTaskIAMRole
      Family: nginx
      # the Memory property is required if using the Fargate launch type
      Memory: 512
      # NetworkMode: awsvpc is required if using the Fargate launch type      
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  nginxService:
    Type: AWS::ECS::Service
    DependsOn: ECSInternetFacingLoadBalancerDefaultListener
    Properties:
      Cluster: !Ref nginxECSCluster
      DesiredCount: 1
      # Must specify CODE_DEPLOY in DeploymentController
      # DeploymentController:
      #   Type: CODE_DEPLOY
      LaunchType: FARGATE
      LoadBalancers: 
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref nginxTargetGroup
      # NetworkConfiguration is required for tasks that use the
      # awsvpc network mode, which is the network mode required by Fargate
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
          Subnets:
            - !Ref PublicSubnet01
            - !Ref PublicSubnet02
      PlatformVersion: LATEST
      # Role: String
      ServiceName: nginx-3
      TaskDefinition: !Ref nginxTaskDefinition
