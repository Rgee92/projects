---

AWSTemplateFormatVersion: '2010-09-09'

Description: Create an ELBv2 utilizing a WAFv2 Web Application Firewall

Parameters:

  WebACLBlockedIPSetAddresses:
    Type: String
    Default: 208.66.25.134/32

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ALBLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALBLoadBalancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ALBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      Type: application

  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Accepted Request through WAF"
            StatusCode: 200
      LoadBalancerArn: !Ref ALBLoadBalancer
      Port: 80
      Protocol: HTTP

  WebACLBlockedIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Addresses: 
        - !Ref WebACLBlockedIPSetAddresses
      IPAddressVersion: IPV4
      Scope: REGIONAL

  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Rules:
        - Action:
            Block: {}
          Name: block-by-ip-set
          Priority: 1
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt WebACLBlockedIPSet.Arn
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            SampledRequestsEnabled: true
            MetricName: !Sub ${AWS::StackName}-block-by-ip-set
      Scope: REGIONAL
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        SampledRequestsEnabled: true
        # it appears that all requests that do _not_ trigger a rule are tagged with the MetricName below
        MetricName: !Sub ${AWS::StackName}-allowed

  ALBLoadBalancerWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties: 
      ResourceArn: !Ref ALBLoadBalancer
      WebACLArn: !GetAtt WebACL.Arn

Outputs:

  WebACLRefOutput:
    Value: !Ref WebACL

  WebACLId:
    Value: !GetAtt WebACL.Id

  WebACLArn:
    Value: !GetAtt WebACL.Arn
