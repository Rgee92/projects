---

AWSTemplateFormatVersion: '2010-09-09'

Description: Create an ELBv2 utilizing a WAFv2 Web Application Firewall and with Logging Enabled

Parameters:

  WebACLBlockedIPSetAddresses:
    Type: String
    Default: 208.66.25.134/32

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ALBLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALBLoadBalancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ALBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      Type: application

  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Accepted Request through WAF"
            StatusCode: 200
      LoadBalancerArn: !Ref ALBLoadBalancer
      Port: 80
      Protocol: HTTP

  WebACLDeliveryStreamS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # the WebACLDeliveryStreamIAMPolicy document below is taken from
  # https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3
  WebACLDeliveryStreamIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Sub ${WebACLDeliveryStreamS3Bucket.Arn}
              - !Sub ${WebACLDeliveryStreamS3Bucket.Arn}/*
          # - Effect: Allow
          #   Action:
          #   - kinesis:DescribeStream
          #   - kinesis:GetShardIterator
          #   - kinesis:GetRecords
          #   Resource: arn:aws:kinesis:region:account-id:stream/stream-name
          # - Effect: Allow
          #   Action:
          #   - kms:Decrypt
          #   - kms:GenerateDataKey
          #   Resource:
          #   - arn:aws:kms:region:account-id:key/key-id
          #   Condition:
          #     StringEquals:
          #       kms:ViaService: s3.region.amazonaws.com
          #     StringLike:
          #       kms:EncryptionContext:aws:s3:arn: arn:aws:s3:::bucket-name/prefix*
          # - Effect: Allow
          #   Action:
          #   - logs:PutLogEvents
          #   Resource:
          #   - arn:aws:logs:region:account-id:log-group:log-group-name:log-stream:log-stream-name
          # - Effect: Allow
          #   Action:
          #   - lambda:InvokeFunction
          #   - lambda:GetFunctionConfiguration
          #   Resource:
          #   - arn:aws:lambda:region:account-id:function:function-name:function-version
      PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-DeliverySteamIamPolicy
      Roles:
        - !Ref WebACLDeliveryStreamIAMRole

  WebACLDeliveryStreamIAMRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole

  WebACLDeliveryStream:
    # Note: the WAFv2 Interface calls this a "Amazon Kinesis Data Firehose Delivery Stream"
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub aws-waf-logs-${AWS::StackName}
      S3DestinationConfiguration:
        BucketARN: !GetAtt WebACLDeliveryStreamS3Bucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          NoEncryptionConfig: NoEncryption
        RoleARN: !GetAtt WebACLDeliveryStreamIAMRole.Arn

  WebACLBlockedIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Addresses: 
        - !Ref WebACLBlockedIPSetAddresses
      IPAddressVersion: IPV4
      Scope: REGIONAL

  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Rules:
        - Action:
            Block: {}
          Name: block-by-ip-set
          Priority: 1
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt WebACLBlockedIPSet.Arn
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            SampledRequestsEnabled: true
            MetricName: !Sub ${AWS::StackName}-block-by-ip-set
      Scope: REGIONAL
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        SampledRequestsEnabled: true
        # it appears that all requests that do _not_ trigger a rule are tagged with the MetricName below
        MetricName: !Sub ${AWS::StackName}-allowed

  ALBLoadBalancerWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties: 
      ResourceArn: !Ref ALBLoadBalancer
      WebACLArn: !GetAtt WebACL.Arn

Outputs:

  WebACLRefOutput:
    Value: !Ref WebACL

  WebACLId:
    Value: !GetAtt WebACL.Id

  WebACLArn:
    Value: !GetAtt WebACL.Arn
