AWSTemplateFormatVersion: '2010-09-09'
Description: Create a VPC containing one subnet and an Auto Scaling Group.
Parameters:
  WebServerInstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: 64
  AWSRegionArch2AMI:
    # CentOS 7 AMI versions, available from:
    # https://aws.amazon.com/marketplace/fulfillment?productId=b7ee8a69-ee97-4a49-9e68-afaee216db2e
    us-east-1:
      '64': ami-6d1c2007
    us-west-1:
      '64': ami-af4333cf
    us-west-2:
      '64': ami-d2c924b2
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  PublicInternetRoute:
    Type: AWS::EC2::Route
    # DependsOn:
    # - InternetGateway
    # - PublicInternetRouteTable
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WebServer Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref WebServerELBSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: WebServerInstanceType
          - Arch
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      InstanceType: !Ref WebServerInstanceType
      UserData:
        Fn::Base64: |
          #!/bin/bash -
          # from stack asg_with_update_policy_2016.yaml
          yum -y install httpd
          cat > /var/www/html/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <body>
          <h1>Testing</h1>
          </body>
          </html>
          EOF
          systemctl start httpd.service
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      # HealthCheckGracePeriod allows "x" seconds before the 
      # HealthCheck begins checking the health of a given instance
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      LoadBalancerNames:
        - !Ref WebServerELB
      MaxSize: 2
      MinSize: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        # based on documentation at:
        # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html#cfn-attributes-updatepolicy-rollingupdate-maxbatchsize
        # I believe this to be the number of instances that are "rolled" at each step
        MaxBatchSize: 1
  WebServerELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WebServer ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebServerELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60
      CrossZone: true
      HealthCheck:
        HealthyThreshold: 3
        Interval: 30
        Target: HTTP:80/index.html
        Timeout: 5
        UnhealthyThreshold: 5
      Listeners:
      - LoadBalancerPort: 80
        InstancePort: 80
        Protocol: HTTP
      SecurityGroups:
        - !Ref WebServerELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet
Outputs:
  WebServerELBDNSName:
    Description: The DNSName of the WebServerELB
    Value:
      Fn::GetAtt:
      - WebServerELB
      - DNSName
