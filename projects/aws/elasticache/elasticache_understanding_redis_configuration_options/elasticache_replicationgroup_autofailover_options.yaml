---
AWSTemplateFormatVersion: '2010-09-09'

Description: Create a VPC containing two subnets and different instances of an ElastiCache ReplicationGroup

Parameters: {}

Mappings: {}

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicSubnet0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet0

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet1

  RedisParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      CacheParameterGroupFamily: redis3.2
      Description: RedisParameterGroup

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: RedisSubnetGroup
      SubnetIds:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RedisSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379

  RedisNoAutoFailoverOneNodeReplicationGroup:
    # this resources, when viewed in the AWS Console, has the following attributes:
    # Number of Nodes: 1
    # Shards: 1
    # Multi-AZ: disabled
    # Nodes:
    #   nodeid-001, Current Role: primary
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutomaticFailoverEnabled: false
      CacheNodeType: cache.t2.micro
      CacheParameterGroupName: !Ref RedisParameterGroup
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: 3.2.4
      # Please specify at least one cacheCluster in the replicationGroup
      # to resolve this I added NumCacheClusters: 1
      # with this added
      # Automatic failover requires 2 or more cache clusters. Create more cache clusters or disable automatic failover.
      # to resolve this I added: 
      # AutomaticFailoverEnabled: false
      NumCacheClusters: 1
      ReplicationGroupDescription: RedisNoAutoFailoverOneNodeReplicationGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup

  RedisNoAutoFailoverTwoNodeReplicationGroup:
    # this resources, when viewed in the AWS Console, has the following attributes:
    # Number of Nodes: 2
    # Shards: 1
    # Multi-AZ: disabled
    # Nodes:
    #   nodeid-001, Current Role: primary
    #   nodeid-001, Current Role: replica
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutomaticFailoverEnabled: false
      CacheNodeType: cache.t2.micro
      CacheParameterGroupName: !Ref RedisParameterGroup
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: 3.2.4
      # same as RedisNoAutoFailoverOneNodeReplicationGroup but with 2 Cache Clusters
      NumCacheClusters: 2
      ReplicationGroupDescription: RedisNoAutoFailoverTwoNodeReplicationGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup

  RedisYesAutoFailoverTwoClusterReplicationGroup:
    # this resources, when viewed in the AWS Console, has the following attributes:
    # Number of Nodes: 2 nodes
    # Shards: 1
    # Multi-AZ: enabled
    # Nodes:
    #   nodeid-001, Current Role: primary
    #   nodeid-002, Current Role: replica
    #     in CloudWatch: Replication Lag metric does exist and has value greater than one
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      # Automatic failover is not supported for T1 and T2 cache node types.
      AutomaticFailoverEnabled: true
      # the cache.m3.medium is the least expensive type of node that supports AutomaticFailoverEnabled: true
      CacheNodeType: cache.m3.medium
      CacheParameterGroupName: !Ref RedisParameterGroup
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: 3.2.4
      # Please specify at least one cacheCluster in the replicationGroup
      # to resolve this I added NumCacheClusters: 1
      # with this added
      # Automatic failover requires 2 or more cache clusters. Create more cache clusters or disable automatic failover.
      # to resolve this I added: 
      # AutomaticFailoverEnabled: false
      NumCacheClusters: 2
      ReplicationGroupDescription: RedisYesAutoFailoverTwoClusterReplicationGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup

  RedisYesAutoFailoverThreeClusterReplicationGroup:
    # this resources, when viewed in the AWS Console, has the following attributes:
    # Number of Nodes: 3
    # Shards: 1
    # Multi-AZ: enabled
    # Nodes:
    #   nodeid-001, Current Role: primary
    #   nodeid-002, Current Role: replica
    #   nodeid-003, Current Role: replica
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutomaticFailoverEnabled: true
      CacheNodeType: cache.m3.medium
      CacheParameterGroupName: !Ref RedisParameterGroup
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: 3.2.4
      # Same as RedisAutoFailoverTwoClusterReplicationGroup but with 3 CacheClusters
      NumCacheClusters: 3
      ReplicationGroupDescription: RedisYesAutoFailoverThreeClusterReplicationGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup

Outputs: {}
