---

AWSTemplateFormatVersion: 2010-09-09

Parameters:

  ECSServerInstanceType:
    Description: ECS Server Instance Type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium

  ECSServerKeyName:
    Description: ECS Server Key Name
    Type: AWS::EC2::KeyPair::KeyName
    Default: ECSServerKey

Mappings:

  AWSRegion2AWSResources:
    # from https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    us-west-2:
      AMI: ami-00e0090ac21971297  

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  ECSServiceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ECSServerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSServerIAMRole

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Server Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ECSServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt ECSServerInstanceProfile.Arn
        ImageId: !FindInMap [ AWSRegion2AWSResources, !Ref 'AWS::Region', AMI ]
        InstanceType: !Ref ECSServerInstanceType
        KeyName: !Ref ECSServerKeyName
        NetworkInterfaces:
          # AssociatePublicIpAddress: true would not be common in production
          # environments but is suffecient for developing our own understanding
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups: [ !GetAtt ECSServerSecurityGroup.GroupId ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            cat > /etc/ecs/ecs.config <<EOF
            # setting ECS_AVAILABLE_LOGGING_DRIVERS=["fluentd"] disables a number of other
            # logging drivers, listed as follows: ["none", "awslogs", "syslog", "json-file"]
            # ECS_AVAILABLE_LOGGING_DRIVERS=["none", "awslogs", "syslog", "json-file"]
            ECS_AVAILABLE_LOGGING_DRIVERS=["fluentd", "json-file"]
            ECS_CLUSTER=${ECSCluster}
            EOF

  ECSServerScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 1
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSServerLaunchTemplate
        Version: !GetAtt ECSServerLaunchTemplate.LatestVersionNumber
      MaxSize: 1
      MinSize: 1
      VPCZoneIdentifier:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02

  FluentdTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: fluentd
          Memory: 256
          Name: fluentd
          PortMappings:
            # by default containers using --log-driver=fluentd connect to localhost:24224
            # https://docs.docker.com/config/containers/logging/fluentd/
            - ContainerPort: 24224
              HostPort: 24224

  FluentdService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      SchedulingStrategy: DAEMON
      TaskDefinition: !Ref FluentdTaskDefinition

  # docker run --log-driver=fluentd ubuntu echo 'Hello Fluentd!'
  # https://www.fluentd.org/guides/recipes/docker-logging
  FluentdPusherTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - echo 'Hello Fluentd!'
          # DependsOn
          Image: ubuntu
          LogConfiguration:
            LogDriver: fluentd
          Memory: 256
          Name: fluentdpusher

  NginxService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      # note that running nginx with SchedulingStrategy: DAEMON
      # is sufficent for running this particular test
      # but is done only for demonstration purposes
      SchedulingStrategy: DAEMON
      TaskDefinition: !Ref NginxTaskDefinition

  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: nginx
          LogConfiguration:
            LogDriver: fluentd
          Memory: 256
          Name: nginx
          PortMappings:
            - ContainerPort: 80
              HostPort: 80