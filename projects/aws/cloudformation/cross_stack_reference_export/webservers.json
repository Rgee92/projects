{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create an Auto Scaling Group of webservers that reference an Exported Output from another CloudFormation stack.",
  "Parameters": {
    "NetworkVPCName": {
      "Description": "Name of an active CloudFormation stack that contains the networking resources.",
      "Type": "String",
      "Default": "NetworkVPC"
    },
    "webServerInstanceType": {
      "Description": "web Server EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.micro": {
        "Arch": "64"
      },
      "t2.small": {
        "Arch": "64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "64": "ami-feb6fee9"
      },
      "us-west-1": {
        "64": "ami-36094156"
      },
      "us-west-2": {
        "64": "ami-01eb3061"
      }
    }
  },
  "Resources": {
    "webServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "webServerInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "webServerSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "webServerInstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -\n",
                "apt -y update\n",
                "apt -y install apache2\n",
                "ami_id=$(curl --silent http://169.254.169.254/latest/meta-data/ami-id)\n",
                "instance_id=$(curl --silent http://169.254.169.254/latest/meta-data/instance-id)\n",
                "instance_type=$(curl --silent http://169.254.169.254/latest/meta-data/instance-type)\n",
                "local_ip=$(curl --silent http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "public_ip=$(curl --silent http://169.254.169.254/latest/meta-data/public-ipv4)\n",
                "cat > /var/www/html/index.html <<EOF\n",
                "<html>\n",
                "<head>\n",
                "</head>\n",
                "<body>\n",
                "<h1>Server Information</h1>\n",
                "<ul>\n",
                "  <li>AMI: $ami_id</li>\n",
                "  <li>Instance ID: $instance_id</li>\n",
                "  <li>Instance Type: $instance_type</li>\n",
                "  <li>Local IP: $local_ip</li>\n",
                "  <li>Public IP: $public_ip</li>\n",
                "</ul>\n",
                "</body>\n",
                "</html>\n",
                "EOF\n"
              ]
            ]
          }
        }
      }
    },
    "webServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "web Server Security Group",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkVPCName}-VPCId"
          }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "webServerELBSecurityGroup"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "webServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NetworkVPCName}-PublicSubnet"
            }
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "webServerLaunchConfig"
        },
        "MinSize": "2",
        "MaxSize": "2",
        "DesiredCapacity": "2",
        "LoadBalancerNames": [
          {
            "Ref": "webServerELB"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "webserver-asg",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "webServerELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "web Server ELB Security Group",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkVPCName}-VPCId"
          }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "webServerELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NetworkVPCName}-PublicSubnet"
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "webServerELBSecurityGroup"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/index.html",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        },
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "CrossZone": "true",
        "ConnectionDrainingPolicy": {
          "Enabled": "true",
          "Timeout": "60"
        }
      }
    }
  },
  "Outputs": {
    "webServerELBDNSName": {
      "Description": "The DNSName of the webServer ELB",
      "Value": {
        "Fn::GetAtt": [
          "webServerELB",
          "DNSName"
        ]
      }
    }
  }
}
