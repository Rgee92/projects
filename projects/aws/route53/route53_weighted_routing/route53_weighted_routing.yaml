AWSTemplateFormatVersion: '2010-09-09'

Description: Create a VPC containing two Application Load Balancers

Parameters: {}

Mappings: {}

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ALBLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALBLoadBalancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ALB01LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      Type: application

  ALB01HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Hello from ALB01"
            StatusCode: 200
      LoadBalancerArn: !Ref ALB01LoadBalancer
      Port: 80
      Protocol: HTTP

  ALB02LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      Type: application

  ALB02HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Hello from ALB02"
            StatusCode: 200
      LoadBalancerArn: !Ref ALB02LoadBalancer
      Port: 80
      Protocol: HTTP

  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: test.cloudavail.com

  ALB01RecordSet:
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget:
        DNSName: !GetAtt ALB01LoadBalancer.DNSName
        HostedZoneId: !GetAtt ALB01LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref Route53HostedZone
      Name: alb.test.cloudavail.com
      SetIdentifier: ALB01RecordSet
      Type: A
      Weight: 90

  ALB02RecordSet:
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget:
        DNSName: !GetAtt ALB02LoadBalancer.DNSName
        HostedZoneId: !GetAtt ALB02LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref Route53HostedZone
      Name: alb.test.cloudavail.com
      SetIdentifier: ALB02RecordSet
      Type: A
      Weight: 10

Outputs: {}
