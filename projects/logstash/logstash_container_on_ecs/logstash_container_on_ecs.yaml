---

AWSTemplateFormatVersion: 2010-09-09

Description: ECS Cluster and its associated resources.

Parameters:

  ECSContainerInstanceInstanceType:
    Description: ECSContainerInstance Instance Type
    Type: String
    Default: t2.micro

  KeyName:
    Description: ECS Keypair
    Type: AWS::EC2::KeyPair::KeyName

Mappings:

  AWSInstanceType2Arch:
    t2.micro:
      Arch: 64HVM

  AWSRegionArch2AMI:
    # Keep AMIs up-to-date with this list:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI_launch_latest.html
    us-west-2:
      64HVM: ami-3702ca4f

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - PublicInternetRouteTable
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSServiceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Sid: ''            
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ECSContainerInstanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSContainerInstanceRole

  ECSContainerInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref ECSContainerInstanceLaunchConfig
      MaxSize: 2
      MinSize: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02

  ECSContainerInstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ECSContainerInstanceInstanceProfile
      ImageId:
        Fn::FindInMap:
          - AWSRegionArch2AMI
          - Ref: AWS::Region
          - Fn::FindInMap:
            - AWSInstanceType2Arch
            - Ref: ECSContainerInstanceInstanceType
            - Arch
      InstanceType: !Ref ECSContainerInstanceInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref ECSContainerInstanceSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            cat > /etc/ecs/ecs.config <<EOF
            ECS_CLUSTER=${ECSCluster}
            EOF

  ECSContainerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSContainerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Container Instance Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LogstashELBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  LogstashELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: nginx ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5044
          ToPort: 5044
          CidrIp: 0.0.0.0/0

  LogstashELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      SecurityGroups:
        - !Ref LogstashELBSecurityGroup
      HealthCheck:
        Target: TCP:5044
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5
      Listeners:
        - LoadBalancerPort: 5044
          InstancePort: 5044
          InstanceProtocol: TCP
          Protocol: TCP
      CrossZone: true
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60

  LogstashTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: logstash
          Image: logstash
          Cpu: 1024
          # Note: if the container attempts to exceed the allowed memory the container is terminated
          Memory: 512
          PortMappings:
            - ContainerPort: 5044
              HostPort: 5044
          Essential: true
      NetworkMode: bridge


  LogstashServiceDefinition:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: logstash
          ContainerPort: 5044
          LoadBalancerName: !Ref LogstashELB
      Role: !Ref ECSServiceIAMRole
      TaskDefinition: !Ref LogstashTaskDefinition

Outputs:

  LogstashELBUrl:
      Description: The URL of the Internet Facing ALB
      Value: !GetAtt LogstashELB.DNSName
