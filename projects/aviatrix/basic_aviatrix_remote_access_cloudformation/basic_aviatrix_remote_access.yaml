---

AWSTemplateFormatVersion: '2010-09-09'

Description: Create a VPC for testing the Aviatrix service

Parameters:

  AviatrixControllerInstanceType:
    Type: String
    Description: Server Instance Type
    Default: t2.medium
    AllowedValues:
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type


  AviatrixControllerInstanceAMI:
    Type: AWS::EC2::Image::Id
    Default: ami-1f770667
    Description: AMI ID for the Aviatrix Controller Instance

  AviatrixServerKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: aviatrix
    Description: KeyName used to access Instances generated by this file

  ServerInstanceType:
    Type: String
    Description: Server Instance Type
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type

Mappings:

  AWSInstanceType2Arch:
    t2.micro:
      Arch: 64
  AWSRegionArch2AMI:
    # https://cloud-images.ubuntu.com/locator/ec2/
    # 18.04 lts hvm:ebs-ssd
    us-west-2:
      '64': ami-0f47ef92b4218ec09

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet01

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet01

  AviatrixAppIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aviatrix-role-app
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              !Sub arn:aws:iam::${AWS::AccountId}:root
          Action:
          - sts:AssumeRole
      Path: /

  AviatrixControllerEC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aviatrix-role-ec2
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /

  AviatrixAssumeRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: aviatrix-assume-role-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: arn:aws:iam::*:role/aviatrix-*
          - Effect: Allow
            Action:
              - aws-marketplace:MeterUsage
            Resource: '*'
      Roles:
        - !Ref AviatrixControllerEC2IAMRole

  AviatrixAppIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: aviatrix-app-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:Describe*
              - elasticloadbalancing:Describe*
              - route53:List*
              - route53:Get*
              - sqs:Get*
              - sqs:List*
              - sns:List*
              - s3:List*
              - s3:Get*
              - iam:List*
              - iam:Get*
              - directconnect:Describe*
              - guardduty:Get*
              - guardduty:List*
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:RunInstances
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:RunInstances
            Resource: arn:aws:ec2:*:*:image/ami-*
          - Effect: Allow
            Action:
              - ec2:DeleteSecurityGroup
              - ec2:RevokeSecurityGroupEgress
              - ec2:RevokeSecurityGroupIngress
              - ec2:AuthorizeSecurityGroup*
              - ec2:CreateSecurityGroup
              - ec2:AssociateRouteTable
              - ec2:CreateRoute
              - ec2:CreateRouteTable
              - ec2:DeleteRoute
              - ec2:DeleteRouteTable
              - ec2:DisassociateRouteTable
              - ec2:ReplaceRoute
              - ec2:ReplaceRouteTableAssociation
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:AllocateAddress
              - ec2:AssociateAddress
              - ec2:DisassociateAddress
              - ec2:ReleaseAddress
              - ec2:AssignPrivateIpAddresses
              - ec2:AttachNetworkInterface
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DetachNetworkInterface
              - ec2:ModifyNetworkInterfaceAttribute
              - ec2:ResetNetworkInterfaceAttribute
              - ec2:UnassignPrivateIpAddresses
              - ec2:ModifyInstanceAttribute
              - ec2:MonitorInstances
              - ec2:RebootInstances
              - ec2:ReportInstanceStatus
              - ec2:ResetInstanceAttribute
              - ec2:StartInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
              - ec2:UnmonitorInstances
              - ec2:AttachInternetGateway
              - ec2:CreateInternetGateway
              - ec2:DeleteInternetGateway
              - ec2:DetachInternetGateway
              - ec2:CreateKeyPair
              - ec2:DeleteKeyPair
              - ec2:CreateSubnet
              - ec2:DeleteSubnet
              - ec2:ModifySubnetAttribute
              - ec2:CreateTags
              - ec2:DeleteTags
              - ec2:CreateVpc
              - ec2:DeleteVpc
              - ec2:ModifyVpcAttribute
              - ec2:CreateCustomerGateway
              - ec2:DeleteCustomerGateway
              - ec2:CreateVpnConnection
              - ec2:DeleteVpnConnection
              - ec2:CreateVpcPeeringConnection
              - ec2:AcceptVpcPeeringConnection
              - ec2:DeleteVpcPeeringConnection
              - ec2:ModifyInstanceCreditSpecification
              - ec2:CreateNetworkAclEntry
              - ec2:ReplaceNetworkAclEntry
              - ec2:DeleteNetworkAclEntry
            Resource: '*'
          - Effect: Allow
            Action:
              - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
              - elasticloadbalancing:AttachLoadBalancerToSubnets
              - elasticloadbalancing:ConfigureHealthCheck
              - elasticloadbalancing:CreateLoadBalancer*
              - elasticloadbalancing:DeleteLoadBalancer*
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:CreateTargetGroup
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DeleteTargetGroup
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DeleteListener
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
            Resource: '*'
          - Effect: Allow
            Action:
              - route53:ChangeResourceRecordSets
              - route53:CreateHostedZone
              - route53:DeleteHostedZone
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:DeleteObject
            Resource: '*'
          - Effect: Allow
            Action:
              - sqs:AddPermission
              - sqs:ChangeMessageVisibility
              - sqs:CreateQueue
              - sqs:DeleteMessage
              - sqs:DeleteQueue
              - sqs:PurgeQueue
              - sqs:ReceiveMessage
              - sqs:RemovePermission
              - sqs:SendMessage
              - sqs:SetQueueAttributes
              - sqs:TagQueue
            Resource: '*'
          - Effect: Allow
            Action:
              - iam:PassRole
              - iam:AddRoleToInstanceProfile
              - iam:CreateInstanceProfile
              - iam:DeleteInstanceProfile
              - iam:RemoveRoleFromInstanceProfile
              - iam:CreateServiceLinkedRole
            Resource: '*'
          - Effect: Allow
            Action:
              - guardduty:CreateDetector
              - guardduty:DeleteDetector
              - guardduty:UpdateDetector
            Resource: '*'
      Roles:
        - !Ref AviatrixAppIAMRole

  AviatrixControllerIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: aviatrix-role-ec2
      Roles:
        - !Ref AviatrixControllerEC2IAMRole

  AviatrixControllerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Aviatrix - Allow HTTPS to Controller
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443

  AviatrixControllerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AviatrixControllerInstanceAMI
      DisableApiTermination: true
      KeyName: !Ref AviatrixServerKeyName
      InstanceType: !Ref AviatrixControllerInstanceType
      IamInstanceProfile: !Ref AviatrixControllerIAMInstanceProfile
      SecurityGroupIds:
        - !Ref AviatrixControllerSecurityGroup
      SubnetId: !Ref PublicSubnet01

  AviatrixEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref AviatrixControllerInstance
      Domain: vpc

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Server Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/24
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: ServerInstanceType
          - Arch
      InstanceType: !Ref ServerInstanceType
      KeyName: !Ref AviatrixServerKeyName
      SecurityGroups:
        - !Ref ServerSecurityGroup

  ServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref ServerLaunchConfig
      MaxSize: 1
      MinSize: 1
      VPCZoneIdentifier:
        - !Ref PrivateSubnet01

Outputs: {}
