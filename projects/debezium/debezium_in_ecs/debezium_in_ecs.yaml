---

AWSTemplateFormatVersion: 2010-09-09

Parameters:

  DBInstanceMasterUserPassword:
    Description: DB Instance MasterUserPassword
    NoEcho: true
    Type: String

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  MSKClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MSK Cluster Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: 10.0.0.0/24
      VpcId: !Ref VPC

  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties: 
      BrokerNodeGroupInfo:
        ClientSubnets:
          - !Ref PublicSubnet01
          - !Ref PublicSubnet02
        InstanceType: kafka.t3.small
        SecurityGroups:
          - !Ref MSKClusterSecurityGroup
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 40
      ClusterName: basic-msk-cluster
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS_PLAINTEXT
          InCluster: true
      KafkaVersion: 2.2.1
      # note that: The number of broker nodes must be a multiple of Availability Zones in the Client Subnets parameter.
      NumberOfBrokerNodes: 2

  DBInstanceDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: DBInstance DB Parameter Group
      Family: mysql8.0

  DBInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB Instance Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  DBInstanceSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Instance Subnets
      SubnetIds:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.micro
      DBParameterGroupName: !Ref DBInstanceDBParameterGroup
      DBSubnetGroupName: !Ref DBInstanceSubnetGroup
      Engine: MySQL
      EngineVersion: 8.0.21
      MasterUsername: test
      MasterUserPassword: !Ref DBInstanceMasterUserPassword
      PubliclyAccessible: true
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DBInstanceSecurityGroup

  ECSServiceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSPublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Public Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8083
          ToPort: 8083
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  ECSPublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      Type: application
      SecurityGroups:
        - !Ref ECSPublicLoadBalancerSecurityGroup

  DebeziumTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /${AWS::StackName}
      RetentionInDays: 1

  DebeziumTaskIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # the AmazonECSTaskExecutionRolePolicy policy provides ECR and CloudWatch Logs permissions
        # we are using CloudWatch Logs for logging
        # we are using a "public" image, so ECR access is not required, so permissions are too broad
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  DebeziumTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Debezium Task Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8083
          ToPort: 8083
          SourceSecurityGroupId: !Ref ECSPublicLoadBalancerSecurityGroup
      VpcId: !Ref VPC

  DebeziumTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions:
        - Environment:
            - # the BOOTSTRAP_SERVERS variable, when run within the 
              # [kafka@363f5b5ddadb ~]$ echo $(env | grep .*PORT_9092_TCP= | sed -e 's|.*tcp://||' | uniq | paste -sd ,)
              # 172.17.0.3:9092
              Name: BOOTSTRAP_SERVERS
              Value: b-1.basic-msk-cluster.d5hjdh.c5.kafka.us-west-2.amazonaws.com:9092,b-2.basic-msk-cluster.d5hjdh.c5.kafka.us-west-2.amazonaws.com:9092
            - Name: CONFIG_STORAGE_TOPIC
              Value: my_connect_configs
            - Name: OFFSET_STORAGE_TOPIC
              Value: my_connect_offsets
            - Name: STATUS_STORAGE_TOPIC
              Value: my_connect_statuses
          Essential: true
          Image: debezium/connect
          # unsure if LogConfiguration: awslogs is required for fargate
          # however, awslogs is the only available logdriver option
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DebeziumTaskLogGroup
              awslogs-region: !Ref AWS::Region
              # if awslogs-stream-prefix is not set the following error is thrown:
              # Fargate requires log configuration options to include awslogs-stream-prefix to support log driver awslogs
              awslogs-stream-prefix: debezium
          Name: debezium
          PortMappings:
            - ContainerPort: 8083
              HostPort: 8083
              Protocol: tcp
      # the Cpu property is required if using the Fargate launch type
      Cpu: 256
      # an ExecutionRoleArn is required if a ContainerDefinition contains a LogConfiguration
      # that utilizes LogDriver: awslogs
      ExecutionRoleArn: !Ref DebeziumTaskIAMRole
      Family: debezium
      # the Memory property is required if using the Fargate launch type
      Memory: 512
      # NetworkMode: awsvpc is required if using the Fargate launch type      
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  DebeziumServiceListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DebeziumServiceTargetGroup
      LoadBalancerArn: !Ref ECSPublicLoadBalancer
      Port: 8083
      Protocol: HTTP

  DebeziumServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8083
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  DebeziumService:
    Type: AWS::ECS::Service
    DependsOn: DebeziumServiceListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      LoadBalancers: 
        - ContainerName: debezium
          ContainerPort: 8083
          TargetGroupArn: !Ref DebeziumServiceTargetGroup
      # NetworkConfiguration is required for tasks that use the
      # awsvpc network mode, which is the network mode required by Fargate
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref DebeziumTaskSecurityGroup
          Subnets:
            - !Ref PublicSubnet01
            - !Ref PublicSubnet02
      PlatformVersion: LATEST
      # Role: String
      ServiceName: debezium
      TaskDefinition: !Ref DebeziumTaskDefinition

Outputs: {}
